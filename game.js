// Array of available button colors for the game
var buttonColors = ['red', 'blue', 'green', 'yellow'];

// The sequence of colors generated by the game
var gamePattern = [];

// The sequence of colors clicked by the user
var userClickedPattern = [];

// The current level of the game, initialized to 0
var level = 0;

// A flag to track if the game has started
var started = false;

// Event listener for any keypress to start the game
$(document).keypress(function() {
  // Check if the game has not started yet
  if (!started) {
    // Update the level title and start the game
    $('#level-title').text('Level ' + level);
    newSequence();
    started = true;
  }
});

// Function to generate and display a new sequence
function newSequence() {
  // Increment the level and reset the user's pattern for the new round
  userClickedPattern = [];
  level++;
  $('#level-title').text('Level ' + level);

  // Generate a random number to pick a color from the array
  var randomNumber = Math.floor(Math.random() * 4);
  var randomChosenColor = buttonColors[randomNumber];

  // Add the new color to the game's sequence
  gamePattern.push(randomChosenColor);

  // Animate the button to indicate the chosen color
  $('#' + randomChosenColor).fadeOut(100).fadeIn(100);

  // Play the corresponding sound for the chosen color
  playSound(randomChosenColor);
}

// Event listener for clicks on any button with the class 'btn'
$('.btn').click(function() {
  // Get the ID of the clicked button
  var userChosenColor = $(this).attr("id");

  // Add the clicked color to the user's pattern
  userClickedPattern.push(userChosenColor);

  // Animate the button press and play its sound
  animatePress(userChosenColor);
  playSound(userChosenColor);

  // Check if the user's last click matches the game's sequence
  checkAnswer(userClickedPattern.length - 1);
});

// Function to play a sound based on the name passed
function playSound(name) {
  var audio = new Audio('sounds/' + name + '.mp3');
  audio.play();
}

// Function to add and remove a CSS class to create a pressed animation
function animatePress(currentColor) {
  // Add the 'pressed' class
  $('#' + currentColor).addClass('pressed');

  // Remove the 'pressed' class after 100 milliseconds
  setTimeout(function() {
    $('#' + currentColor).removeClass('pressed');
  }, 100);
}

// Function to check the user's answer against the game's sequence
function checkAnswer(currentLevel) {
  // Check if the last clicked color matches the game's sequence at the current level
  if (userClickedPattern[currentLevel] === gamePattern[currentLevel]) {
    // If the answer is correct, check if the user has completed the entire sequence
    if (userClickedPattern.length === gamePattern.length) {
      // If the sequence is complete, start a new one after a delay
      setTimeout(function() {
        newSequence();
      }, 1000);
    }
  } else {
    // If the answer is wrong, play the 'wrong' sound and change the body's background
    playSound('wrong');
    $('body').addClass('game-over');

    // Remove the 'game-over' class after a short delay
    setTimeout(function() {
      $('body').removeClass('game-over');
    }, 200);

    // Update the title to show the 'Game Over' message
    $('#level-title').text('Game Over, Press Any Key to Restart');

    // Reset the game state
    startOver();
  }
}

// Function to reset the game to its initial state
function startOver() {
  level = 0;
  gamePattern = [];
  started = false;
}